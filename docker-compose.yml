version: '3.9'

services:
  app:
    container_name: graphql-api
    image: nest-graphql
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${PORT}:${PORT}
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - elasticsearch

    networks:
      - app_network

  postgres:
    container_name: postgres
    image: postgres:12
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}']

  redis:
    image: redis
    restart: always
    container_name: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redisdata:/data
    networks:
      - app_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: elasticsearch:8.12.1
    restart: always
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - '${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}'
      - 9300:9300
    volumes:
      - 'esdata:/usr/share/elasticsearch/data'
    networks:
      - app_network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl --silent --fail elasticsearch:9200/_cluster/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app_network:
    driver: bridge

volumes:
  pgdata: {}
  redisdata: {}
  esdata: {}
